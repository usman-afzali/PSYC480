width = 0.2, color = "darkred", size = 1) +
geom_point(aes(y = BBCP_mean), color = "blue", size = 3) +
geom_point(aes(y = TBCP_mean), color = "red", size = 3) +
geom_line(aes(y = BBCP_mean), color = "blue", size = 1) +
geom_line(aes(y = TBCP_mean), color = "red", size = 1) +
labs(x = "Weight Lifted (kg)", y = "Mean") +
scale_y_continuous(limits = c(0, 0.2), expand = c(0, 0.02)) +
theme_classic()
ggplot(df, aes(x = weight_lifted)) +
geom_errorbar(aes(ymin = BBCP_mean - BBCP_sd,
ymax = BBCP_mean + BBCP_sd),
width = 0.2, color = "darkblue", size = 1) +
geom_errorbar(aes(ymin = TBCP_mean - TBCP_sd,
ymax = TBCP_mean + TBCP_sd),
width = 0.2, color = "darkred", size = 1) +
geom_point(aes(y = BBCP_mean), color = "blue", size = 3) +
geom_point(aes(y = TBCP_mean), color = "red", size = 3) +
geom_line(aes(y = BBCP_mean), color = "blue", size = 1) +
geom_line(aes(y = TBCP_mean), color = "red", size = 1) +
labs(x = "Weight Lifted (kg)", y = "Mean") +
scale_y_continuous(limits = c(0, 0.2), expand = c(0, 0.02)) +
theme_classic() +
theme(legend.position = "bottom")
plot(weight_lifted, BBCP_mean, ylim=c(0, 0.2), pch=16, col="blue", xlab="Weight Lifted (kg)", ylab="Mean")
points(weight_lifted, TBCP_mean, pch=17, col="red")
segments(weight_lifted, BBCP_mean - BBCP_sd, weight_lifted, BBCP_mean + BBCP_sd, col="blue")
segments(weight_lifted, TBCP_mean - TBCP_sd, weight_lifted, TBCP_mean + TBCP_sd, col="red")
lines(weight_lifted, BBCP_mean, col="blue")
lines(weight_lifted, TBCP_mean, col="red")
legend("topright", legend=c("BBCP", "TBCP"), pch=c(16, 17), col=c("blue", "red"), bty="n")
plot(weight_lifted, BBCP_mean, ylim=c(0, 0.2), pch=16, col="blue", xlab="Weight Lifted (kg)", ylab="Mean")
points(weight_lifted, TBCP_mean, pch=17, col="red")
segments(weight_lifted, BBCP_mean - BBCP_sd, weight_lifted, BBCP_mean + BBCP_sd, col="green")
segments(weight_lifted, TBCP_mean - TBCP_sd, weight_lifted, TBCP_mean + TBCP_sd, col="green")
lines(weight_lifted, BBCP_mean, col="blue")
lines(weight_lifted, TBCP_mean, col="red")
legend("topright", legend=c("BBCP", "TBCP"), pch=c(16, 17), col=c("blue", "red"), bty="n")
plot(weight_lifted, BBCP_mean, ylim=c(0, 0.2), pch=16, col="blue", xlab="Weight Lifted (kg)", ylab="Mean")
points(weight_lifted, TBCP_mean, pch=17, col="red")
segments(weight_lifted, BBCP_mean - BBCP_sd, weight_lifted, BBCP_mean + BBCP_sd, col="orange", lwd=2)
segments(weight_lifted, TBCP_mean - TBCP_sd, weight_lifted, TBCP_mean + TBCP_sd, col="orange", lwd=2)
lines(weight_lifted, BBCP_mean, col="blue")
lines(weight_lifted, TBCP_mean, col="red")
legend("topright", legend=c("BBCP", "TBCP"), pch=c(16, 17), col=c("blue", "red"), bty="n")
plot(weight_lifted, BBCP_mean, ylim=c(0, 0.2), pch=16, col="blue", xlab="Weight Lifted (kg)", ylab="Mean")
points(weight_lifted, TBCP_mean, pch=17, col="red")
segments(weight_lifted, BBCP_mean - BBCP_sd, weight_lifted, BBCP_mean + BBCP_sd, col="black", lwd=2)
segments(weight_lifted, TBCP_mean - TBCP_sd, weight_lifted, TBCP_mean + TBCP_sd, col="black", lwd=2)
lines(weight_lifted, BBCP_mean, col="blue")
lines(weight_lifted, TBCP_mean, col="red")
legend("topright", legend=c("BBCP", "TBCP"), pch=c(16, 17), col=c("blue", "red"), bty="n")
plot(weight_lifted, BBCP_mean, ylim=c(0, 0.2), pch=16, col="blue", xlab="Weight Lifted (kg)", ylab="Mean", main="ABDC EFG")
points(weight_lifted, TBCP_mean, pch=17, col="red")
segments(weight_lifted, BBCP_mean - BBCP_sd, weight_lifted, BBCP_mean + BBCP_sd, col="black", lwd=2)
segments(weight_lifted, TBCP_mean - TBCP_sd, weight_lifted, TBCP_mean + TBCP_sd, col="black", lwd=2)
lines(weight_lifted, BBCP_mean, col="blue")
lines(weight_lifted, TBCP_mean, col="red")
legend("topright", legend=c("BBCP", "TBCP"), pch=c(16, 17), col=c("blue", "red"), bty="n")
plot(weight_lifted, BBCP_mean, ylim=c(0, 0.2), pch=16, col="blue", xlab="Weight Lifted (kg)", ylab="Mean", main="ABDC EFG")
points(weight_lifted, TBCP_mean, pch=17, col="red")
segments(weight_lifted, BBCP_mean - BBCP_sd, weight_lifted, BBCP_mean + BBCP_sd, col="black", lwd=2)
segments(weight_lifted, TBCP_mean - TBCP_sd, weight_lifted, TBCP_mean + TBCP_sd, col="black", lwd=2)
arrows(weight_lifted, BBCP_mean - BBCP_sd, weight_lifted, BBCP_mean + BBCP_sd, length=0.05, angle=90, code=3, col="orange", lwd=2)
arrows(weight_lifted, TBCP_mean - TBCP_sd, weight_lifted, TBCP_mean + TBCP_sd, length=0.05, angle=90, code=3, col="orange", lwd=2)
lines(weight_lifted, BBCP_mean, col="blue")
lines(weight_lifted, TBCP_mean, col="red")
legend("topright", legend=c("BBCP", "TBCP"), pch=c(16, 17), col=c("blue", "red"), bty="n")
plot(weight_lifted, BBCP_mean, ylim=c(0, 0.2), pch=16, col="blue", xlab="Weight Lifted (kg)", ylab="Mean", main="ABDC EFG")
points(weight_lifted, TBCP_mean, pch=17, col="red")
segments(weight_lifted, BBCP_mean - BBCP_sd, weight_lifted, BBCP_mean + BBCP_sd, col="black", lwd=2)
segments(weight_lifted, TBCP_mean - TBCP_sd, weight_lifted, TBCP_mean + TBCP_sd, col="black", lwd=2)
arrows(weight_lifted, BBCP_mean - BBCP_sd, weight_lifted, BBCP_mean + BBCP_sd, length=0.05, angle=90, code=3, col="black", lwd=2)
arrows(weight_lifted, TBCP_mean - TBCP_sd, weight_lifted, TBCP_mean + TBCP_sd, length=0.05, angle=90, code=3, col="black", lwd=2)
lines(weight_lifted, BBCP_mean, col="blue")
lines(weight_lifted, TBCP_mean, col="red")
legend("topright", legend=c("BBCP", "TBCP"), pch=c(16, 17), col=c("blue", "red"), bty="n")
plot(weight_lifted, BBCP_mean, ylim=c(0, 0.2), pch=16, col="blue", xlab="Weight Lifted (kg)", ylab="Mean", main="ABDC EFG")
points(weight_lifted, TBCP_mean, pch=17, col="red")
segments(weight_lifted, BBCP_mean - BBCP_sd, weight_lifted, BBCP_mean + BBCP_sd, col="blue", lwd=2)
segments(weight_lifted, TBCP_mean - TBCP_sd, weight_lifted, TBCP_mean + TBCP_sd, col="black", lwd=2)
arrows(weight_lifted, BBCP_mean - BBCP_sd, weight_lifted, BBCP_mean + BBCP_sd, length=0.05, angle=90, code=3, col="blue", lwd=2)
arrows(weight_lifted, TBCP_mean - TBCP_sd, weight_lifted, TBCP_mean + TBCP_sd, length=0.05, angle=90, code=3, col="black", lwd=2)
lines(weight_lifted, BBCP_mean, col="blue")
lines(weight_lifted, TBCP_mean, col="red")
legend("topright", legend=c("BBCP", "TBCP"), pch=c(16, 17), col=c("blue", "red"), bty="n")
plot(weight_lifted, BBCP_mean, ylim=c(0, 0.2), pch=16, col="blue", xlab="Weight Lifted (kg)", ylab="Mean", main="ABDC EFG")
points(weight_lifted, TBCP_mean, pch=17, col="red")
segments(weight_lifted, BBCP_mean - BBCP_sd, weight_lifted, BBCP_mean + BBCP_sd, col="blue", lwd=2)
segments(weight_lifted, TBCP_mean - TBCP_sd, weight_lifted, TBCP_mean + TBCP_sd, col="red", lwd=2)
arrows(weight_lifted, BBCP_mean - BBCP_sd, weight_lifted, BBCP_mean + BBCP_sd, length=0.05, angle=90, code=3, col="blue", lwd=2)
arrows(weight_lifted, TBCP_mean - TBCP_sd, weight_lifted, TBCP_mean + TBCP_sd, length=0.05, angle=90, code=3, col="red", lwd=2)
lines(weight_lifted, BBCP_mean, col="blue")
lines(weight_lifted, TBCP_mean, col="red")
legend("topright", legend=c("BBCP", "TBCP"), pch=c(16, 17), col=c("blue", "red"), bty="n")
BBCP_data <- matrix(c(0.0469, 0.0575, 0.0506, 0.0462,
0.0693, 0.0788, 0.0727, 0.0725,
0.1462, 0.1496, 0.1627, 0.1533), nrow = 3, byrow = TRUE)
TBCP_data <- matrix(c(0.0219, 0.0202, 0.0188, 0.0203,
0.0294, 0.0276, 0.0308, 0.0303,
0.0575, 0.0582, 0.0547, 0.0591), nrow = 3, byrow = TRUE)
BBCP_mean <- apply(BBCP_data, 1, mean)
TBCP_mean <- apply(TBCP_data, 1, mean)
BBCP_mean
TBCP_mean
BBCP_sd <- apply(BBCP_data, 1, sd)
TBCP_sd <- apply(TBCP_data, 1, sd)
weight_lifted <- c(1, 2, 5)
df <- data.frame(weight_lifted, BBCP_mean, TBCP_mean, BBCP_sd, TBCP_sd)
df
plot(weight_lifted, BBCP_mean, ylim=c(0, 0.2), pch=16, col="blue", xlab="Weight Lifted (kg)", ylab="Mean", main="Biceps and Triceps brachii concentric phases")
points(weight_lifted, TBCP_mean, pch=17, col="red")
segments(weight_lifted, BBCP_mean - BBCP_sd, weight_lifted, BBCP_mean + BBCP_sd, col="blue", lwd=2)
segments(weight_lifted, TBCP_mean - TBCP_sd, weight_lifted, TBCP_mean + TBCP_sd, col="red", lwd=2)
arrows(weight_lifted, BBCP_mean - BBCP_sd, weight_lifted, BBCP_mean + BBCP_sd, length=0.05, angle=90, code=3, col="blue", lwd=2)
arrows(weight_lifted, TBCP_mean - TBCP_sd, weight_lifted, TBCP_mean + TBCP_sd, length=0.05, angle=90, code=3, col="red", lwd=2)
lines(weight_lifted, BBCP_mean, col="blue")
lines(weight_lifted, TBCP_mean, col="red")
legend("topright", legend=c("BBCP", "TBCP"), pch=c(16, 17), col=c("blue", "red"), bty="n")
plot(weight_lifted, BBCP_mean, ylim=c(0, 0.2), pch=16, col="blue", xlab="Weight Lifted (kg)", ylab="Mean", main="Biceps and Triceps brachii concentric phases averages plots")
points(weight_lifted, TBCP_mean, pch=17, col="red")
segments(weight_lifted, BBCP_mean - BBCP_sd, weight_lifted, BBCP_mean + BBCP_sd, col="blue", lwd=2)
segments(weight_lifted, TBCP_mean - TBCP_sd, weight_lifted, TBCP_mean + TBCP_sd, col="red", lwd=2)
arrows(weight_lifted, BBCP_mean - BBCP_sd, weight_lifted, BBCP_mean + BBCP_sd, length=0.05, angle=90, code=3, col="blue", lwd=2)
arrows(weight_lifted, TBCP_mean - TBCP_sd, weight_lifted, TBCP_mean + TBCP_sd, length=0.05, angle=90, code=3, col="red", lwd=2)
lines(weight_lifted, BBCP_mean, col="blue")
lines(weight_lifted, TBCP_mean, col="red")
legend("topright", legend=c("BBCP", "TBCP"), pch=c(16, 17), col=c("blue", "red"), bty="n")
plot(weight_lifted, BBCP_mean, ylim=c(0, 0.2), pch=16, col="blue", xlab="Weights Lifted (kg)", ylab="Average of reps (mV)", main="Biceps and Triceps brachii concentric phases averages plots")
points(weight_lifted, TBCP_mean, pch=17, col="red")
segments(weight_lifted, BBCP_mean - BBCP_sd, weight_lifted, BBCP_mean + BBCP_sd, col="blue", lwd=2)
segments(weight_lifted, TBCP_mean - TBCP_sd, weight_lifted, TBCP_mean + TBCP_sd, col="red", lwd=2)
arrows(weight_lifted, BBCP_mean - BBCP_sd, weight_lifted, BBCP_mean + BBCP_sd, length=0.05, angle=90, code=3, col="blue", lwd=2)
arrows(weight_lifted, TBCP_mean - TBCP_sd, weight_lifted, TBCP_mean + TBCP_sd, length=0.05, angle=90, code=3, col="red", lwd=2)
lines(weight_lifted, BBCP_mean, col="blue")
lines(weight_lifted, TBCP_mean, col="red")
legend("topright", legend=c("BBCP", "TBCP"), pch=c(16, 17), col=c("blue", "red"), bty="n")
plot(weight_lifted, BBCP_mean, ylim=c(0, 0.2), pch=16, col="blue", xlab="Weights Lifted (kg)", ylab="Average of reps (mV)", main="Biceps and Triceps brachii concentric phases averages plots")
points(weight_lifted, TBCP_mean, pch=17, col="red")
segments(weight_lifted, BBCP_mean - BBCP_sd, weight_lifted, BBCP_mean + BBCP_sd, col="blue", lwd=2)
segments(weight_lifted, TBCP_mean - TBCP_sd, weight_lifted, TBCP_mean + TBCP_sd, col="red", lwd=2)
arrows(weight_lifted, BBCP_mean - BBCP_sd, weight_lifted, BBCP_mean + BBCP_sd, length=0.05, angle=90, code=3, col="blue", lwd=2)
arrows(weight_lifted, TBCP_mean - TBCP_sd, weight_lifted, TBCP_mean + TBCP_sd, length=0.05, angle=90, code=3, col="red", lwd=2)
lines(weight_lifted, BBCP_mean, col="blue")
lines(weight_lifted, TBCP_mean, col="red")
legend("topright", legend=c("Biceps brachii concentric phase", "Triceps brachii concentric phase"), pch=c(16, 17), col=c("blue", "red"), bty="n")
time <- c(5, 10, 15, 135)
Biceps <- c(0.1554, 0.1489, 0.1374, 0.2608)
Triceps <- c(0.0585, 0.0575, 0.0615, 0.1151)
df <- data.frame(time, Biceps, Triceps)
df
plot(time, Biceps, ylim=c(0, 0.2), pch=16, col="blue", xlab="Time (sec)", ylab="EMG Amplitude (mV)", main="Isometric")
plot(time, Biceps, ylim=c(0, 0.3), pch=16, col="blue", xlab="Time (sec)", ylab="EMG Amplitude (mV)", main="Isometric")
points(time, Triceps, pch=17, col="red")
lines(weight_lifted, BBCP_mean, col="blue")
points(time, Triceps, pch=17, col="red")
lines(time, Biceps, col="blue")
plot(time, Biceps, ylim=c(0, 0.3), pch=16, col="blue", xlab="Time (sec)", ylab="EMG Amplitude (mV)", main="Isometric")
points(time, Triceps, pch=17, col="red")
lines(time, Biceps, col="blue")
lines(time, Triceps, col="red")
legend("topright", legend=c("Biceps", "Triceps"), pch=c(16, 17), col=c("blue", "red"), bty="n")
plot(time, Biceps, ylim=c(0, 0.3), pch=16, col="blue", xlab="Time (sec)", ylab="EMG Amplitude (mV)", main="Isometric (for Weight = 10 kg)")
points(time, Triceps, pch=17, col="red")
lines(time, Biceps, col="blue")
lines(time, Triceps, col="red")
legend("topright", legend=c("Biceps", "Triceps"), pch=c(16, 17), col=c("blue", "red"), bty="n")
```{r}
df <- readxl::read_xlsx("Grades.xlsx")
View(df)
# Load the 'xlsx' package
library(xlsx)
# Set the file path of your Excel file
file_path <- "Grades.xlsx"
# Specify the sheet name or index
sheet_name <- "Sheet2"  # Replace with the desired sheet name
# Read the sheet into a data frame
sheet_data <- read.xlsx(file_path, sheetName = sheet_name)
# Read the sheet into a data frame
sheet_data <- readxl::read.xlsx(file_path, sheetName = sheet_name)
# Read the sheet into a data frame
sheet_data <- readxl::read_xlsx(file_path, sheetName = sheet_name)
# Install the 'xlsx' package if you haven't already
install.packages("xlsx")
# Load the 'xlsx' package
library(xlsx)
# Load the 'readxl' package
library(readxl)
# Set the file path of your Excel file
file_path <- "Gardes.xlsx"
# Specify the sheet name or index
sheet_name <- "Sheet2"  # Replace with the desired sheet name
# Read the sheet into a data frame
sheet_data <- read_xlsx(file_path, sheet = sheet_name)
# Set the file path of your Excel file
file_path <- "Gardes.xlsx"
# Specify the sheet name or index
sheet_name <- "Sheet2"  # Replace with the desired sheet name
# Read the sheet into a data frame
sheet_data <- read_xlsx(file_path, sheet = sheet_name)
df <- readxl::read_xlsx("Grades.xlsx", "Sheet2")
View(df)
df <- readxl::read_xlsx("Grades.xlsx", "Sheena and Daniela")
df
# Get the values from cells A9, D9, and E9
values <- c(Sheena and Daniela$A9, Sheena and Daniela$D9, Sheena and Daniela$E9)
# Get the values from cells A9, D9, and E9
values <- c(df$A9, df$D9, df$E9)
# Get the values from cells A9, D9, and E9
values <- c(df[9, "A"], df[9, "D"], df[9, "E"])
View(df)
# Get the values from cells A9, D9, and E9
values <- c(df[9, "A"], df[9, "D"], df[9, "E"])
# Get the values from cells A9, D9, and E9
values <- c(df[9, 1], df[9, 4], df[9, 5])
df <- readxl::read_xlsx("Grades.xlsx", "Sheena and Daniela")
df
# Get the values from cells A9, D9, and E9
values <- c(df[9, 1], df[9, 4], df[9, 5])
# Define the weights
weights <- c(0.2, 0.2, 0.2)
# Calculate the weighted average
weighted_avg <- sum(values * weights)
# Get the values from cells A9, D9, and E9
values <- c(df[9, 1], df[9, 4], df[9, 5])
values
df
View(df)
values
# Get the values from cells A9, D9, and E9
values <- c(df[1, 9], df[4, 9], df[5, 9])
# Get the values from cells A9, D9, and E9
values <- c(df[9, 1], df[9, 4], df[9, 5])
values
# Get the values from cells A9, D9, and E9
values <- c(df[9, 1], df[9, 4], df[9, 5])
print(values)
# Define the weights
weights <- c(0.2, 0.2, 0.2)
# Calculate the weighted average
weighted_avg <- sum(values * weights)
# Print the final number
print(weighted_avg)
df <- df[,c(1,3,5)]
df
df <- df[,c(1,4,5)]
df
df <- df[,c(1,4,5)]
df <- readxl::read_xlsx("Grades.xlsx", "Sheena and Daniela")
df
df <- df[,c(1,4,5)]
df
library(dplyr)
df <- readxl::read_xlsx("Grades.xlsx", "Sheena and Daniela")
df
df <- df[,c(1,4,5)]
df
library(dplyr)
df <- readxl::read_xlsx("Grades.xlsx", "Sheena and Daniela")
df
df <- df[,c(1,4,5)]
df
library(dplyr)
df <- df %>%
mutate(wu = df$`u`*4) %>%
mutate(wa = df$`a`*4) %>%
mutate(wp = df$`p`*4)
df <- df %>%
mutate(wu = df$u*4) %>%
mutate(wa = df$a*4) %>%
mutate(wp = df$p*4)
View(df)
df <- readxl::read_xlsx("Grades.xlsx", "Sheena and Daniela", range = "A10:A15")
df
df <- readxl::read_xlsx("Grades.xlsx", "Sheena and Daniela", range = "A10:A15", "D10:D15")
df
dfu <- readxl::read_xlsx("Grades.xlsx", "Sheena and Daniela", range = "A10:A15")
dfa <- readxl::read_xlsx("Grades.xlsx", "Sheena and Daniela", range = "D10:D15")
dfu
dfa
dfu <- readxl::read_xlsx("Grades.xlsx", "Sheena and Daniela", range = "A10:A15")
dfa <- readxl::read_xlsx("Grades.xlsx", "Sheena and Daniela", range = "D10:D15")
dfu
dfa
c = dfu + dfa
c
dfu
dfa
c = dfu + dfa
c
dfu <- readxl::read_xlsx("Grades.xlsx", "Sheena and Daniela", range = "A10:A15")
dfa <- readxl::read_xlsx("Grades.xlsx", "Sheena and Daniela", range = "D10:D15")
dfu
dfa
c = dfu + dfa
c
dfu <- readxl::read_xlsx("Grades.xlsx", "Sheena and Daniela", range = "A10:A15", header = TRUE)
dfu <- readxl::read_xlsx("Grades.xlsx", "Sheena and Daniela", range = "A10:A15")
dfa <- readxl::read_xlsx("Grades.xlsx", "Sheena and Daniela", range = "D10:D15")
dfu
dfa
dfu <- readxl::read_xlsx("Grades.xlsx", "Sheena and Daniela")
dfa <- readxl::read_xlsx("Grades.xlsx", "Sheena and Daniela")
dfu
dfu <- readxl::read_xlsx("Grades.xlsx", "Sheena and Daniela")
dfa <- readxl::read_xlsx("Grades.xlsx", "Sheena and Daniela")
dfu
dfa
c = dfu + dfa
dfu <- readxl::read_xlsx("Grades.xlsx", "Sheena and Daniela")
dfa <- readxl::read_xlsx("Grades.xlsx", "Sheena and Daniela")
dfu
df <- readxl::read_xlsx("Grades.xlsx", "Sheena and Daniela")
df <- readxl::read_xlsx("Grades.xlsx", "Sheena and Daniela")
dfa <- df$a
dfb <- df$b
df <- df[,c(1,4,5)]
df
df <- df %>%
mutate(PSYC344FinSco = df$a+df$b+df$c)
df
df <- df %>%
mutate(PSYC344FinSco = (df$a+df$b+df$c)/3)
df
df <- df %>%
mutate(PSYC344FinSco = ((df$a+df$b+df$c)/3)*5)
df
df <- df %>%
mutate(PSYC344FinSco = ((df$a+df$b+df$c)/3)*5)
df
df <- df %>%
mutate(PSYC344FinSco = ((df$a+df$b+df$c)/3)/5)
df
df <- df %>%
mutate(PSYC344FinSco = ((df$a+df$b+df$c)/3)*4)
df
score = sum(df$PSYC344FinSco)
score
df <- df %>%
mutate(PSYC344FinSco = ((df$a+df$b+df$c)/3))
df
df <- readxl::read_xlsx("Grades.xlsx", "test")
df <- df[,c(1,4,5)]
df
df <- df %>%
mutate(PSYC344FinSco = ((df$a+df$b+df$c)/3))
df
df <- df %>%
mutate(ave = ((df$a+df$b+df$c)/3))
df <- df[c(9:14),c(1,4,5)]
df <- df[,c(1,4,5)]
df
df <- df[9:14, ]
df <- as.matrix(df)
df <- df %>%
mutate(weights = c(0.2, 0.2, 0.2, 0.2, 0.1, 0.1))
df <- as.matrix(df)
df <- df %>%
mutate(weights = c(0.2, 0.2, 0.2, 0.2, 0.1, 0.1))
weights = c(0.2, 0.2, 0.2, 0.2, 0.1, 0.1)
df$weights <- weights
df$weights <- weights
df
View(df)
meaN <- rowMeans(df)
meaN <- rowMeans(df)
average <- rowMeans(df)
df <- as.matrix(df)
average <- rowMeans(df)
data <- readxl::read_xlsx("Grades.xlsx", "test")
# Select columns 1, 4, and 5
selected_columns <- data[, c(1, 4, 5)]
# Select rows 9 to 14 from the selected columns
selected_rows <- selected_columns[9:14, ]
# Convert selected rows into a matrix
selected_matrix <- as.matrix(selected_rows)
# Calculate the average of numeric columns
average <- rowMeans(selected_matrix[, sapply(selected_matrix, is.numeric)])
# Identify numeric columns
numeric_cols <- sapply(selected_rows, is.numeric)
# Calculate the average of numeric columns
average <- rowMeans(selected_rows[, numeric_cols])
# Create the weights column
weights <- c(0.2, 0.2, 0.2, 0.2, 0.1, 0.1)
weighted_average <- average * weights
selected_rows$weighted_average <- weighted_average
print(selected_rows)
data <- readxl::read_xlsx("Grades.xlsx", "test")
# Select columns 1, 4, and 5
selected_columns <- data[, c(1, 4, 5)]
# Select rows 9 to 14 from the selected columns
selected_rows <- selected_columns[9:14, ]
# Identify numeric columns
numeric_cols <- sapply(selected_rows, is.numeric)
# Calculate the average of numeric columns
average <- rowMeans(selected_rows[, numeric_cols])
# Create the weights column
weights <- c(0.2, 0.2, 0.2, 0.2, 0.1, 0.1)
weighted_average <- average * weights
selected_rows$weighted_average <- weighted_average
print(selected_rows)
View(selected_rows)
selected_rows
View(selected_rows)
# Select columns 1, 4, and 5
selected_columns <- data[, c(1, 4, 5)]
# Select rows 9 to 14 from the selected columns
selected_rows <- selected_columns[8:14, ]
selected_rows
# Identify numeric columns
numeric_cols <- sapply(selected_rows, is.numeric)
# Calculate the average of numeric columns
average <- rowMeans(selected_rows[, numeric_cols])
# Create the weights column
weights <- c(0.2, 0.2, 0.2, 0.2, 0.1, 0.1)
weighted_average <- average * weights
selected_rows$weighted_average <- weighted_average
print(selected_rows)
# Select rows 9 to 14 from the selected columns
selected_rows <- selected_columns[8:13, ]
selected_rows
# Identify numeric columns
numeric_cols <- sapply(selected_rows, is.numeric)
# Calculate the average of numeric columns
average <- rowMeans(selected_rows[, numeric_cols])
# Create the weights column
weights <- c(0.2, 0.2, 0.2, 0.2, 0.1, 0.1)
weighted_average <- average * weights
selected_rows$weighted_average <- weighted_average
print(selected_rows)
sum(selected_rows)
sum_values <- rowSums(selected_rows[, 1:3], na.rm = TRUE)
sum_values <- rowSums(selected_rows[, 1:3])
total <- sum(rowSums(selected_rows[, numeric_cols]))
weighted_average
weighted_sum <- sum(selected_rows$weighted_average)
weighted_sum
# Create the weights column
weights <- c(4, 4, 4, 4, 2, 2)
weighted_average <- average * weights
weighted_average
selected_rows$weighted_average <- weighted_average
weighted_sum <- sum(selected_rows$weighted_average)
weighted_sum
weighted_sum <- sum((selected_rows$weighted_average)/5)
weighted_sum
write_xlsx(weighted_sum, "output.xlsx")
install.packages("writexl")
write_xlsx::writexl(weighted_sum, "output.xlsx")
library(writexl)
write_xlsx(weighted_sum, "output.xlsx")
print(selected_rows)
print("Weighted Sum:", weighted_sum)
write_xlsx(weighted_sum, "output.xlsx")
write_xlsx(selected_rows, "output.xlsx")
data <- readxl::read_xlsx("Grades.xlsx", "test")
# Select columns 1, 4, and 5
selected_columns <- data[, c(1, 4, 5)]
# Select rows 9 to 14 from the selected columns
selected_rows <- selected_columns[8:13, ]
selected_rows
# Identify numeric columns
numeric_cols <- sapply(selected_rows, is.numeric)
# Calculate the average of numeric columns
average <- rowMeans(selected_rows[, numeric_cols])
# Create the weights column
weights <- c(4, 4, 4, 4, 2, 2)
weighted_average <- average * weights
weighted_average
selected_rows$weighted_average <- weighted_average
weighted_sum <- sum((selected_rows$weighted_average)/5)
weighted_sum
print(selected_rows)
print("Weighted Sum:", weighted_sum)
library(writexl)
write_xlsx(selected_rows, "output2.xlsx")
data$Weighted_Average <- NA
data[8:13, "Weighted_Average"] <- weighted_average
data[8:13, "Weighted_Average"] <- weighted_average
write.xlsx(data, "data.xlsx", sheetName = 1, startRow = 8, startCol = 6)
install.packages("openxlsx")
library(openxlsx)
write.xlsx(data, "data.xlsx", sheetName = 1, startRow = 8, startCol = 6)
write.xlsx(data, "Grades.xlsx", sheetName = "test", startRow = 8, startCol = 6)
data <- readxl::read_xlsx("Grades.xlsx", "test")
# Select columns 1, 4, and 5
selected_columns <- data[, c(1, 4, 5)]
# Select rows 9 to 14 from the selected columns
selected_rows <- selected_columns[8:13, ]
selected_rows
# Identify numeric columns
numeric_cols <- sapply(selected_rows, is.numeric)
# Calculate the average of numeric columns
average <- rowMeans(selected_rows[, numeric_cols])
# Create the weights column
weights <- c(4, 4, 4, 4, 2, 2)
weighted_average <- average * weights
data$Weighted_Average <- NA
weighted_average
data[8:13, "Weighted_Average"] <- weighted_average
write.xlsx(data, "Grades.xlsx", sheetName = "test", startRow = 8, startCol = 6)
data[8:13, c(1, 4, 5)] <- NA
write.xlsx(data, "Grades.xlsx", sheetName = "test", startRow = 8, startCol = 6)
data[8:13, c(1, 4, 5, 7)] <- NA
write.xlsx(data, "Grades.xlsx", sheetName = "test", startRow = 8, startCol = 6)
install.packages("xlsx2pdf")
library(xlsx2pdf)
install.packages("xlsx2pdf")
library(xlsx2pdf)
library("xlsx2pdf")
library(xlsx2pdf)
write.xlsx(data, "modified_data.xlsx", sheetName = 1, startRow = 1, startCol = 1)
system("libreoffice --headless --convert-to pdf modified_data.xlsx")
